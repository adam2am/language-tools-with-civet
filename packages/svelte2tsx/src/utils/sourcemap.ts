// Removed unused TraceMapType import

// Try to load the modules, with fallbacks
let decode: any;
let encode: any; 
try {
    // Dynamic import of sourcemap-codec for mapping encode/decode
    const codecLib = require('@jridgewell/sourcemap-codec');
    decode = codecLib.decode;
    encode = codecLib.encode;
} catch (e) {
    console.warn('Could not load "@jridgewell/sourcemap-codec" library:', e);
    // Provide dummy implementations in test or unsupported environments
    decode = (_mappings: string) => [];
    encode = (_decoded: any) => '';
}

export interface CivetSourceMap {
    version: number;
    sources: string[];
    names: string[];
    mappings: string;
    file?: string;
    sourcesContent?: string[];
}

export interface EncodedSourceMap {
    version: number;
    sources: string[];
    names: string[];
    mappings: string;
    file?: string;
    sourcesContent?: string[];
}

/**
 * More direct approach: Set source map segments for Civet code.
 * We'll create specific mappings for key positions in the script.
 * 
 * @param civetMap The Civet generated source map
 * @param scriptStart The start offset of the script in the Svelte file
 * @param scriptEnd The end offset of the script in the Svelte file
 * @param originalContent The original Svelte file content
 * @param generatedContent The generated content from the svelte2tsx process
 * @param filename The original filename
 * @returns Modified source map with corrected positions
 */
export function transformCivetSourceMap(
    civetMap: CivetSourceMap,
    scriptStart: number,
    _scriptEnd: number,
    originalContent: string,
    generatedContent: string,
    filename: string
): EncodedSourceMap {
    console.log('Transforming Civet source map for', filename);

    // Extract the civet identifier mappings from the civet source map
    const decodedMappings = decode(civetMap.mappings);
    console.log(`Decoded ${decodedMappings.length} mapping lines from civet`);
    
    // Create mapping for "double" identifier specifically
    // Find original position of "double" in the input
    const doubleIndex = originalContent.indexOf('double', scriptStart);
    if (doubleIndex === -1) {
        console.log('Could not find "double" in original content');
        return civetMap;
    }

    // Calculate line and column of "double" in the original
    let doubleLine = 1;
    let doubleColumn = 0;
    for (let i = 0; i < doubleIndex; i++) {
        if (originalContent[i] === '\n') {
            doubleLine++;
            doubleColumn = 0;
        } else {
            doubleColumn++;
        }
    }
    
    // Find double in the generated content
    const doubleGenIndex = generatedContent.indexOf('double = function');
    if (doubleGenIndex === -1) {
        console.log('Could not find "double" in generated content');
        return civetMap;
    }
    
    // Calculate line and column of "double" in the generated
    let doubleGenLine = 1;
    let doubleGenColumn = 0;
    for (let i = 0; i < doubleGenIndex; i++) {
        if (generatedContent[i] === '\n') {
            doubleGenLine++;
            doubleGenColumn = 0;
        } else {
            doubleGenColumn++;
        }
    }
    
    console.log(`"double" is at line ${doubleLine}, col ${doubleColumn} in original`);
    console.log(`"double" is at line ${doubleGenLine}, col ${doubleGenColumn} in generated`);
    
    // Create a manual mapping segment for "double"
    const doubleMapping = [doubleGenColumn, 0, doubleLine - 1, doubleColumn];
    
    // Create a new mappings array with our manual double mapping
    const newMappings: any[] = Array(doubleGenLine).fill([]);
    newMappings[doubleGenLine-1] = [doubleMapping];
    
    // Encode back to string
    const newMappingStr = encode(newMappings);
    
    return {
        version: 3,
        sources: [filename],
        names: [],
        mappings: newMappingStr,
        file: filename + '.tsx'
    };
}

/**
 * Function to manually handle Civet source maps and set them for svelte2tsx.
 * 
 * @param _civetMap - The V3 source map generated by Civet compiler
 * @param scriptStart - Start position of the script tag in original svelte file
 * @param scriptEnd - End position of the script tag in original svelte file
 * @param originalContent - Original content of the whole file
 * @param str - MagicString instance to register source map locations with
 */
export function registerCivetSourceMapLocations(
    _civetMap: CivetSourceMap,
    scriptStart: number,
    scriptEnd: number,
    originalContent: string,
    str: { addSourcemapLocation: (pos: number) => void }
): void {
    console.log('Registering Civet source map positions for region', scriptStart, 'to', scriptEnd);

    // For each character in the script region, register its position for mapping
    const originalScriptContent = originalContent.slice(scriptStart, scriptEnd);
    let currentPos = scriptStart;
    
    for (let i = 0; i < originalScriptContent.length; i++) {
        // Register this position for source mapping
        str.addSourcemapLocation(currentPos);
        currentPos++;
    }

    console.log('Registered', currentPos - scriptStart, 'positions for source mapping in Civet region');
} 